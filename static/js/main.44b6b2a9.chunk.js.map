{"version":3,"sources":["Components/Card.js","CardList.js","Components/Scroll.jsx","Components/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","Components_Card","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","Components_SearchBox","Components_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAaeA,EAVF,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,KAAOC,EAAWF,EAAXE,MAClB,OACKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6DACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,WAA0CO,IAAI,KACtDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAML,GACpBE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAMJ,KCOlBQ,EAZE,SAAAV,GAAgB,IAAbW,EAAaX,EAAbW,OAGlB,OACER,EAAAC,EAAAC,cAAA,WACGM,EAAOC,IAAI,SAACC,EAAMC,GACjB,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EAAGb,KAAMU,EAAOG,GAAGb,KAAMC,MAAOS,EAAOG,GAAGZ,YCCrDe,EARA,SAACC,GACd,OACEf,EAAAC,EAAAC,cAAA,OAAKc,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,WAClEJ,EAAMK,WCSEC,EAZG,SAAAxB,GAAoB,IAAlByB,EAAkBzB,EAAlByB,aAClB,OACEtB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,SACZpB,UAAU,sBACVqB,YAAY,gBACZC,SAAUH,MCuCDI,qBAvCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeFI,eAAiB,SAAAC,GACfR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1CZ,EAAKa,MAAQ,CACXhC,OAAQ,GACR6B,YAAa,IAJHV,mFAQM,IAAAc,EAAAX,KAClBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKL,SAAS,CAAE5B,OAAQsC,uCAQrB,IAAAC,EAEyBjB,KAAKU,MAA7BhC,EAFDuC,EAECvC,OAAQ6B,EAFTU,EAESV,YACVW,EAAiBxC,EAAOyC,OAAO,SAAAC,GACnC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASf,EAAYc,iBAGvD,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8BAAd,eACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAW/B,aAAcQ,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACoD,EAAD,KACEtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU/C,OAAQwC,aAjCVQ,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.44b6b2a9.chunk.js","sourcesContent":["import React from 'react' ;\r\n\r\n\r\nconst Card = ({name , email}) => {\r\n    return(\r\n         <div className=\"bg-light-silver h6 dib tc pa2 br3 grow ba ma2 w5 b--solid\"> \r\n             <img src={`https://robohash.org/${email}200x200`} alt=\"\" />\r\n             <h2 className=\"f4\">{name}</h2>\r\n             <h3 className=\"f5\">{email}</h3>\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from \"react\";\r\nimport Card from \"../src/Components/Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  //exract robots name and email from props one by one and pass it to card\r\n\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return <Card key={i} name={robots[i].name} email={robots[i].email} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '1px solid black', height: '1000px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div>\r\n      <input type=\"search\" \r\n      className=\"  w6 h2 mb3 pa2 tc \" \r\n      placeholder=\"Search Robots\"\r\n      onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport { Robots } from \"./Robots\";\nimport CardList from \"./CardList\";\nimport Scroll from './Components/Scroll'\nimport SearchBox from \"./Components/SearchBox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    //filter the robots as user enter in searchbox and pass it to cardlist to display\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return (\n      <div className=\"App bg-dark-gray\">\n        <h1 className=\"f1 mt0 pt4 light-silver tc\">Robo Friend</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}